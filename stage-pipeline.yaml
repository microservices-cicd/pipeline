apiVersion: v1
kind: Template
labels:
  template: stage-pipeline
message: A Jenkins server will be automatically instantiated in this project to manage
  the Pipeline.  You will be able to log in to
  it using your OpenShift user credentials.
metadata:
  annotations:
    iconClass: icon-jenkins
    tags: instant-app,jenkins
  name: stage-pipeline
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: ${NEXT_STAGE}-pipeline
    labels:
      app: ${NEXT_STAGE}-pipeline
  spec:
    triggers: []
    runPolicy: Serial
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          // use the local ocp cluster
          openshift.withCluster() {

              def CURRENT_NAMESPACE = "${CURRENT_NAMESPACE}"
              def NAMESPACE = "${NAMESPACE}"
              def VERSION = "${VERSION}"
              def CURRENT_STAGE = "${CURRENT_STAGE}"
              def NEXT_STAGE = "${NEXT_STAGE}"

              // use the current namespace
              openshift.withProject() {

                  echo "CURRENT_NAMESPACE ${CURRENT_NAMESPACE}"
                  echo "NAMESPACE ${NAMESPACE}"
                  echo "VERSION ${VERSION}"
                  echo "CURRENT_STAGE ${CURRENT_STAGE}"
                  echo "NEXT_STAGE ${NEXT_STAGE}"

                  try {
                      // run the pipeline on a node
                      node {
                          // the build stage
                          stage("Tag Images") {
                              openshift.tag("${CURRENT_NAMESPACE}/carts:latest", "${NAMESPACE}/carts:${VERSION}")
                              openshift.tag("${CURRENT_NAMESPACE}/catalogue-db:latest", "${NAMESPACE}/catalogue-db:${VERSION}")
                              openshift.tag("${CURRENT_NAMESPACE}/catalogue:latest", "${NAMESPACE}/catalogue:${VERSION}")
                              openshift.tag("${CURRENT_NAMESPACE}/front-end:latest", "${NAMESPACE}/front-end:${VERSION}")
                              openshift.tag("${CURRENT_NAMESPACE}/orders:latest", "${NAMESPACE}/orders:${VERSION}")
                              openshift.tag("${CURRENT_NAMESPACE}/payment:latest", "${NAMESPACE}/payment:${VERSION}")
                              openshift.tag("${CURRENT_NAMESPACE}/queue-master:latest", "${NAMESPACE}/queue-master:${VERSION}")
                              openshift.tag("${CURRENT_NAMESPACE}/shipping:latest", "${NAMESPACE}/shipping:${VERSION}")
                              openshift.tag("${CURRENT_NAMESPACE}/user-db:latest", "${NAMESPACE}/user-db:${VERSION}")
                              openshift.tag("${CURRENT_NAMESPACE}/user:latest", "${NAMESPACE}/user:${VERSION}")

                              openshift.tag("${CURRENT_NAMESPACE}/golang:1.7", "${NAMESPACE}/golang:1.7")
                              openshift.tag("${CURRENT_NAMESPACE}/rabbitmq:3.6.8", "${NAMESPACE}/rabbitmq:3.6.8")
                          }

                          stage("Export config") {
                              sh "oc export dc,svc,secrets --as-template=microservices-cicd -l stage=${CURRENT_STAGE} -n ${CURRENT_NAMESPACE} > microservices-cicd.yaml"
                              sh "sed -i.bak 's/namespace: ${CURRENT_NAMESPACE}/namespace: ${NAMESPACE}/g' microservices-cicd.yaml"
                              sh "sed -i.bak 's/stage: ${CURRENT_STAGE}/stage: ${NEXT_STAGE}/g' microservices-cicd.yaml"
                              sh "sed -i.bak 's/:latest/:${VERSION}/g' microservices-cicd.yaml"
                          }

                          stage("Deploy to ${NEXT_STAGE}") {
                              sh "oc new-app --file=microservices-cicd.yaml -n ${NAMESPACE}"
                          }
                      }

                  } catch(e) {
                      echo "in catch block"
                      echo "Caught: ${err}"
                      currentBuild.result = 'FAILURE'
                      throw err
                  }
              }
          }    
      type: JenkinsPipeline
    output: {}
    resources: {}
    postCommit: {}
    nodeSelector: {}
parameters:
- name: CURRENT_NAMESPACE
  required: true
  description: 'The current namespace'
  value: 'm-cicd-dev'
- name: NAMESPACE
  required: true
  description: 'The stage namespace'
  value: 'm-cicd-qa'
- name: VERSION
  required: true
  description: 'The version for the image streams'
  value: 'v1.0'
- name: CURRENT_STAGE
  required: true
  value: 'dev'
- name: NEXT_STAGE
  required: true
  value: 'qa'
