// use the local ocp cluster
openshift.withCluster() {

    def CURRENT_NAMESPACE = "m-cicd-dev"
    def NAMESPACE = "m-cicd-qa"
    def VERSION = "v1.0"
    def CURRENT_STAGE = "dev"
    def NEXT_STAGE = "qa"
    
    // use the current namespace
    openshift.withProject() {

        echo "CURRENT_NAMESPACE ${CURRENT_NAMESPACE}"
        echo "NAMESPACE ${NAMESPACE}"
        echo "VERSION ${VERSION}"
        echo "CURRENT_STAGE ${CURRENT_STAGE}"
        echo "NEXT_STAGE ${NEXT_STAGE}"
        
        try {
            // run the pipeline on a node
            node {
                // the build stage
                stage("Tag Images") {
                    openshift.tag("${CURRENT_NAMESPACE}/carts:latest", "${NAMESPACE}/carts:${VERSION}")
                    openshift.tag("${CURRENT_NAMESPACE}/catalogue-db:latest", "${NAMESPACE}/catalogue-db:${VERSION}")
                    openshift.tag("${CURRENT_NAMESPACE}/catalogue:latest", "${NAMESPACE}/catalogue:${VERSION}")
                    openshift.tag("${CURRENT_NAMESPACE}/front-end:latest", "${NAMESPACE}/front-end:${VERSION}")
                    openshift.tag("${CURRENT_NAMESPACE}/orders:latest", "${NAMESPACE}/orders:${VERSION}")
                    openshift.tag("${CURRENT_NAMESPACE}/payment:latest", "${NAMESPACE}/payment:${VERSION}")
                    openshift.tag("${CURRENT_NAMESPACE}/queue-master:latest", "${NAMESPACE}/queue-master:${VERSION}")
                    openshift.tag("${CURRENT_NAMESPACE}/shipping:latest", "${NAMESPACE}/shipping:${VERSION}")
                    openshift.tag("${CURRENT_NAMESPACE}/user-db:latest", "${NAMESPACE}/user-db:${VERSION}")
                    openshift.tag("${CURRENT_NAMESPACE}/user:latest", "${NAMESPACE}/user:${VERSION}")
                    
                    openshift.tag("${CURRENT_NAMESPACE}/golang:1.7", "${NAMESPACE}/golang:1.7")
                    openshift.tag("${CURRENT_NAMESPACE}/rabbitmq:3.6.8", "${NAMESPACE}/rabbitmq:3.6.8")
                }
                
                stage("Export config") {
                    sh "oc export dc,svc,secrets --as-template=microservices-cicd -l stage=${CURRENT_STAGE} > microservices-cicd.yaml"
                    sh "sed -i.bak 's/namespace: ${CURRENT_NAMESPACE}/namespace: ${NAMESPACE}/g' microservices-cicd.yaml"
                    sh "sed -i.bak 's/stage: ${CURRENT_STAGE}/stage: ${NEXT_STAGE}/g' microservices-cicd.yaml"
                    sh "sed -i.bak 's/:latest/:${VERSION}/g' microservices-cicd.yaml"
                }
                
                stage("Deploy to ${NEXT_STAGE}") {
                    sh "oc new-app --file=microservices-cicd.yaml -n ${NAMESPACE}"
                    sh "oc expose service/front-end -n ${NAMESPACE}"
                }
            }
        
        } catch(e) {
            error "${e}"
        }
    }
}

